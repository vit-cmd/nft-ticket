// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  TypedMap,
  Entity,
  Value,
  ValueKind,
  store,
  Bytes,
  BigInt,
  BigDecimal
} from "@graphprotocol/graph-ts";

export class Event extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Event entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type Event must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("Event", id.toString(), this);
    }
  }

  static load(id: string): Event | null {
    return changetype<Event | null>(store.get("Event", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get name(): string {
    let value = this.get("name");
    return value!.toString();
  }

  set name(value: string) {
    this.set("name", Value.fromString(value));
  }

  get location(): string {
    let value = this.get("location");
    return value!.toString();
  }

  set location(value: string) {
    this.set("location", Value.fromString(value));
  }

  get description(): string {
    let value = this.get("description");
    return value!.toString();
  }

  set description(value: string) {
    this.set("description", Value.fromString(value));
  }

  get hashImage(): string {
    let value = this.get("hashImage");
    return value!.toString();
  }

  set hashImage(value: string) {
    this.set("hashImage", Value.fromString(value));
  }

  get eventManager(): Bytes {
    let value = this.get("eventManager");
    return value!.toBytes();
  }

  set eventManager(value: Bytes) {
    this.set("eventManager", Value.fromBytes(value));
  }

  get priceUnit(): BigInt {
    let value = this.get("priceUnit");
    return value!.toBigInt();
  }

  set priceUnit(value: BigInt) {
    this.set("priceUnit", Value.fromBigInt(value));
  }

  get startDay(): BigInt {
    let value = this.get("startDay");
    return value!.toBigInt();
  }

  set startDay(value: BigInt) {
    this.set("startDay", Value.fromBigInt(value));
  }

  get endDay(): BigInt {
    let value = this.get("endDay");
    return value!.toBigInt();
  }

  set endDay(value: BigInt) {
    this.set("endDay", Value.fromBigInt(value));
  }
}

export class EventManager extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save EventManager entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type EventManager must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("EventManager", id.toString(), this);
    }
  }

  static load(id: string): EventManager | null {
    return changetype<EventManager | null>(store.get("EventManager", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get approve(): boolean {
    let value = this.get("approve");
    return value!.toBoolean();
  }

  set approve(value: boolean) {
    this.set("approve", Value.fromBoolean(value));
  }
}
